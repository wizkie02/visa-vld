import { ComprehensiveVisaRequirements } from './visa-requirements-service';
import jsPDF from 'jspdf';

// Simple text-based PDF generation using basic text formatting
export function generateRequirementsChecklistText(requirements: ComprehensiveVisaRequirements): string {
  let content = '';
  
  // Header
  content += `VISA REQUIREMENTS CHECKLIST\n`;
  content += `Country: ${requirements.country.toUpperCase()}\n`;
  content += `Visa Type: ${requirements.visaType.toUpperCase()}\n`;
  content += `Last Updated: ${requirements.lastUpdated}\n`;
  content += `\n${'='.repeat(60)}\n\n`;
  
  // General Information
  content += `GENERAL INFORMATION:\n`;
  content += `Processing Time: ${requirements.generalInfo.processingTime}\n`;
  content += `Validity: ${requirements.generalInfo.validity}\n`;
  content += `Fees: ${requirements.generalInfo.fees}\n`;
  content += `Application Methods: ${requirements.generalInfo.applicationMethods.join(', ')}\n\n`;
  
  // Requirements by category
  const categories = {
    'document': 'DOCUMENT REQUIREMENTS',
    'financial': 'FINANCIAL REQUIREMENTS', 
    'personal': 'PERSONAL REQUIREMENTS',
    'travel': 'TRAVEL REQUIREMENTS',
    'health': 'HEALTH REQUIREMENTS'
  };
  
  Object.entries(categories).forEach(([category, title]) => {
    const categoryReqs = requirements.requirements.filter(req => req.category === category);
    if (categoryReqs.length > 0) {
      content += `${title}:\n`;
      content += `${'-'.repeat(title.length)}\n`;
      
      categoryReqs.forEach((req, index) => {
        content += `${index + 1}. ${req.title}${req.required ? ' (REQUIRED)' : ' (OPTIONAL)'}\n`;
        content += `   ${req.description}\n`;
        
        if (req.formats && req.formats.length > 0) {
          content += `   Accepted formats: ${req.formats.join(', ')}\n`;
        }
        
        if (req.specificNotes && req.specificNotes.length > 0) {
          req.specificNotes.forEach(note => {
            content += `   Note: ${note}\n`;
          });
        }
        
        if (req.processingTime) {
          content += `   Processing time: ${req.processingTime}\n`;
        }
        
        content += '\n';
      });
      content += '\n';
    }
  });
  
  // Important Notes
  if (requirements.importantNotes.length > 0) {
    content += `IMPORTANT NOTES:\n`;
    content += `${'-'.repeat(15)}\n`;
    requirements.importantNotes.forEach((note, index) => {
      content += `${index + 1}. ${note}\n`;
    });
    content += '\n';
  }
  
  // Recent Changes
  if (requirements.recentChanges && requirements.recentChanges.length > 0) {
    content += `RECENT CHANGES:\n`;
    content += `${'-'.repeat(15)}\n`;
    requirements.recentChanges.forEach((change, index) => {
      content += `${index + 1}. ${change}\n`;
    });
    content += '\n';
  }
  
  // Official Sources
  content += `OFFICIAL SOURCES:\n`;
  content += `${'-'.repeat(17)}\n`;
  requirements.officialSources.forEach((source, index) => {
    content += `${index + 1}. ${source}\n`;
  });
  content += '\n';
  
  // Footer
  content += `${'='.repeat(60)}\n`;
  content += `Generated by VisaValidator Requirements System\n`;
  content += `Â© 2024 VisaValidator - All rights reserved.\n\n`;
  content += `Need Help? Contact the official embassy or consulate for the most current requirements and assistance with your application.\n`;
  
  return content;
}

export function generateRequirementsChecklistBuffer(requirements: ComprehensiveVisaRequirements): Buffer {
  // Generate text-based PDF content for now - will be properly formatted
  const textContent = generateRequirementsChecklistText(requirements);
  
  // Create a simple PDF-like structure (for now using text format)
  const pdfHeader = `%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/Resources <<
/Font <<
/F1 4 0 R
>>
>>
/MediaBox [0 0 612 792]
/Contents 5 0 R
>>
endobj

4 0 obj
<<
/Type /Font
/Subtype /Type1
/BaseFont /Helvetica
>>
endobj

5 0 obj
<<
/Length ${textContent.length + 100}
>>
stream
BT
/F1 12 Tf
72 720 Td
(${textContent.replace(/\n/g, ') Tj T* (')}) Tj
ET
endstream
endobj

xref
0 6
0000000000 65535 f 
0000000009 00000 n 
0000000074 00000 n 
0000000120 00000 n 
0000000179 00000 n 
0000000364 00000 n 
trailer
<<
/Size 6
/Root 1 0 R
>>
startxref
${400 + textContent.length}
%%EOF`;

  return Buffer.from(pdfHeader, 'utf-8');
}