import { ComprehensiveVisaRequirements } from './visa-requirements-service';

// Simple text-based PDF generation using basic text formatting
export function generateRequirementsChecklistText(requirements: ComprehensiveVisaRequirements): string {
  let content = '';
  
  // Header
  content += `VISA REQUIREMENTS CHECKLIST\n`;
  content += `Country: ${requirements.country.toUpperCase()}\n`;
  content += `Visa Type: ${requirements.visaType.toUpperCase()}\n`;
  content += `Last Updated: ${requirements.lastUpdated}\n`;
  content += `\n${'='.repeat(60)}\n\n`;
  
  // General Information
  content += `GENERAL INFORMATION:\n`;
  content += `Processing Time: ${requirements.generalInfo.processingTime}\n`;
  content += `Validity: ${requirements.generalInfo.validity}\n`;
  content += `Fees: ${requirements.generalInfo.fees}\n`;
  content += `Application Methods: ${requirements.generalInfo.applicationMethods.join(', ')}\n\n`;
  
  // Requirements by category
  const categories = {
    'document': 'DOCUMENT REQUIREMENTS',
    'financial': 'FINANCIAL REQUIREMENTS', 
    'personal': 'PERSONAL REQUIREMENTS',
    'travel': 'TRAVEL REQUIREMENTS',
    'health': 'HEALTH REQUIREMENTS'
  };
  
  Object.entries(categories).forEach(([category, title]) => {
    const categoryReqs = requirements.requirements.filter(req => req.category === category);
    if (categoryReqs.length > 0) {
      content += `${title}:\n`;
      content += `${'-'.repeat(title.length)}\n`;
      
      categoryReqs.forEach((req, index) => {
        content += `${index + 1}. ${req.title}${req.required ? ' (REQUIRED)' : ' (OPTIONAL)'}\n`;
        content += `   ${req.description}\n`;
        
        if (req.formats && req.formats.length > 0) {
          content += `   Accepted formats: ${req.formats.join(', ')}\n`;
        }
        
        if (req.specificNotes && req.specificNotes.length > 0) {
          req.specificNotes.forEach(note => {
            content += `   Note: ${note}\n`;
          });
        }
        
        if (req.processingTime) {
          content += `   Processing time: ${req.processingTime}\n`;
        }
        
        content += '\n';
      });
      content += '\n';
    }
  });
  
  // Important Notes
  if (requirements.importantNotes.length > 0) {
    content += `IMPORTANT NOTES:\n`;
    content += `${'-'.repeat(15)}\n`;
    requirements.importantNotes.forEach((note, index) => {
      content += `${index + 1}. ${note}\n`;
    });
    content += '\n';
  }
  
  // Recent Changes
  if (requirements.recentChanges && requirements.recentChanges.length > 0) {
    content += `RECENT CHANGES:\n`;
    content += `${'-'.repeat(15)}\n`;
    requirements.recentChanges.forEach((change, index) => {
      content += `${index + 1}. ${change}\n`;
    });
    content += '\n';
  }
  
  // Official Sources
  content += `OFFICIAL SOURCES:\n`;
  content += `${'-'.repeat(17)}\n`;
  requirements.officialSources.forEach((source, index) => {
    content += `${index + 1}. ${source}\n`;
  });
  content += '\n';
  
  // Footer
  content += `${'='.repeat(60)}\n`;
  content += `Generated by VisaValidator Requirements System\n`;
  content += `Â© 2024 VisaValidator - All rights reserved.\n\n`;
  content += `Need Help? Contact the official embassy or consulate for the most current requirements and assistance with your application.\n`;
  
  return content;
}

export function generateRequirementsChecklistBuffer(requirements: ComprehensiveVisaRequirements): Buffer {
  const jsPDF = require('jspdf').jsPDF;
  
  try {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    const pageHeight = doc.internal.pageSize.height;
    const margin = 20;
    const maxWidth = pageWidth - 2 * margin;
    let yPosition = 30;

    const addText = (text: string, fontSize: number = 10, isBold: boolean = false) => {
      if (yPosition > pageHeight - 40) {
        doc.addPage();
        yPosition = 30;
      }
      
      doc.setFontSize(fontSize);
      doc.setFont('helvetica', isBold ? 'bold' : 'normal');
      
      const lines = doc.splitTextToSize(text, maxWidth);
      doc.text(lines, margin, yPosition);
      yPosition += lines.length * (fontSize * 0.5) + 3;
    };

    // Header
    addText('VISA REQUIREMENTS CHECKLIST', 18, true);
    addText(`Country: ${requirements.country}`, 12, true);
    addText(`Visa Type: ${requirements.visaType}`, 12, true);
    addText(`Last Updated: ${requirements.lastUpdated}`, 10);
    yPosition += 10;

    // General Information
    addText('GENERAL INFORMATION', 14, true);
    addText(`Processing Time: ${requirements.generalInfo.processingTime}`, 10);
    addText(`Validity: ${requirements.generalInfo.validity}`, 10);
    addText(`Fees: ${requirements.generalInfo.fees}`, 10);
    addText(`Application Methods: ${requirements.generalInfo.applicationMethods.join(', ')}`, 10);
    yPosition += 10;

    // Requirements by category
    const categoryTitles: Record<string, string> = {
      'document': 'DOCUMENT REQUIREMENTS',
      'financial': 'FINANCIAL REQUIREMENTS', 
      'personal': 'PERSONAL REQUIREMENTS',
      'travel': 'TRAVEL REQUIREMENTS',
      'health': 'HEALTH REQUIREMENTS'
    };

    Object.entries(categoryTitles).forEach(([category, title]) => {
      const categoryReqs = requirements.requirements.filter(req => req.category === category);
      if (categoryReqs.length > 0) {
        addText(title, 12, true);
        
        categoryReqs.forEach((req, index) => {
          const status = req.required ? '[REQUIRED]' : '[OPTIONAL]';
          addText(`${index + 1}. ${status} ${req.title}`, 10, true);
          addText(`   ${req.description}`, 9);
          
          if (req.formats && req.formats.length > 0) {
            addText(`   Accepted formats: ${req.formats.join(', ')}`, 9);
          }
          
          if (req.specificNotes && req.specificNotes.length > 0) {
            req.specificNotes.forEach(note => {
              addText(`   Note: ${note}`, 9);
            });
          }
          
          yPosition += 3;
        });
        
        yPosition += 8;
      }
    });

    // Important Notes
    if (requirements.importantNotes && requirements.importantNotes.length > 0) {
      addText('IMPORTANT NOTES', 12, true);
      requirements.importantNotes.forEach((note, index) => {
        addText(`${index + 1}. ${note}`, 10);
      });
      yPosition += 8;
    }

    // Official Sources
    if (requirements.officialSources && requirements.officialSources.length > 0) {
      addText('OFFICIAL SOURCES', 12, true);
      requirements.officialSources.forEach((source, index) => {
        addText(`${index + 1}. ${source}`, 9);
      });
    }

    // Footer
    if (yPosition > pageHeight - 50) {
      doc.addPage();
      yPosition = 30;
    }
    
    yPosition = pageHeight - 30;
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text('Generated by Visa Validator - Document Validation Service', margin, yPosition);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, yPosition + 8);

    return Buffer.from(doc.output('arraybuffer'));
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF checklist');
  }
}