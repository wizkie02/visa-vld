const { jsPDF } = require('jspdf');

interface ValidationResult {
  verified: Array<{
    type: string;
    message: string;
  }>;
  issues: Array<{
    type: string;
    title: string;
    description: string;
    recommendation: string;
  }>;
  score: number;
  completedAt: string;
}

interface VisaRequirement {
  id: string;
  title: string;
  description: string;
  required: boolean;
  formats?: string[];
  specificNotes?: string[];
  category: 'document' | 'financial' | 'personal' | 'travel' | 'health';
  processingTime?: string;
  additionalInfo?: string;
}

interface ComprehensiveVisaRequirements {
  country: string;
  visaType: string;
  lastUpdated: string;
  officialSources: string[];
  requirements: VisaRequirement[];
  generalInfo: {
    processingTime: string;
    validity: string;
    fees: string;
    applicationMethods: string[];
  };
  importantNotes: string[];
  recentChanges?: string[];
}

interface ReportData {
  validationResults: ValidationResult;
  personalInfo: any;
  country: string;
  visaType: string;
  nationality: string;
  requirements?: ComprehensiveVisaRequirements;
  uploadedDocuments: any[];
}

export function generateValidationReportPDF(data: ReportData): Buffer {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  let yPosition = 30;

  // Helper function to add text with word wrapping
  function addText(text: string, fontSize: number = 10, isBold: boolean = false) {
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    
    const lines = doc.splitTextToSize(text, pageWidth - 2 * margin);
    doc.text(lines, margin, yPosition);
    yPosition += lines.length * (fontSize * 0.4) + 5;
    
    // Check if we need a new page
    if (yPosition > 280) {
      doc.addPage();
      yPosition = 30;
    }
  }

  // Title
  addText('VISA VALIDATION REPORT', 16, true);
  yPosition += 10;

  // Personal Information
  addText('PERSONAL INFORMATION', 14, true);
  addText(`Applicant Name: ${data.personalInfo?.applicantName || 'N/A'}`);
  addText(`Passport Number: ${data.personalInfo?.passportNumber || 'N/A'}`);
  addText(`Date of Birth: ${data.personalInfo?.dateOfBirth || 'N/A'}`);
  addText(`Nationality: ${data.nationality || 'N/A'}`);
  addText(`Travel Date: ${data.personalInfo?.travelDate || 'N/A'}`);
  addText(`Stay Duration: ${data.personalInfo?.stayDuration || 'N/A'} days`);
  yPosition += 10;

  // Validation Summary
  addText('VALIDATION SUMMARY', 14, true);
  addText(`Overall Score: ${data.validationResults.score}%`);
  addText(`Completed: ${new Date(data.validationResults.completedAt).toLocaleString()}`);
  yPosition += 10;

  // Verified Documents
  if (data.validationResults.verified?.length > 0) {
    addText('VERIFIED DOCUMENTS', 14, true);
    data.validationResults.verified.forEach((item, index) => {
      addText(`${index + 1}. ${item.type.toUpperCase()}: ${item.message}`);
    });
    yPosition += 10;
  }

  // Issues Found
  if (data.validationResults.issues?.length > 0) {
    addText('ISSUES IDENTIFIED', 14, true);
    data.validationResults.issues.forEach((issue, index) => {
      addText(`${index + 1}. ${issue.title}`, 12, true);
      addText(`Description: ${issue.description}`);
      addText(`Recommendation: ${issue.recommendation}`);
      yPosition += 5;
    });
  }

  // Requirements
  if (data.requirements) {
    yPosition += 10;
    addText('VISA REQUIREMENTS', 14, true);
    addText(`Country: ${data.requirements.country}`);
    addText(`Visa Type: ${data.requirements.visaType}`);
    addText(`Processing Time: ${data.requirements.generalInfo.processingTime}`);
    addText(`Validity: ${data.requirements.generalInfo.validity}`);
    addText(`Fees: ${data.requirements.generalInfo.fees}`);
  }

  // Footer
  yPosition = 280;
  doc.setFontSize(8);
  doc.text('Generated by VisaValidator - All rights reserved', margin, yPosition);
  doc.text(`Report generated on ${new Date().toLocaleDateString()}`, margin, yPosition + 10);

  return Buffer.from(doc.output('arraybuffer'));
}

export function generateRequirementsChecklistPDF(requirements: ComprehensiveVisaRequirements): Buffer {
  const doc = new jsPDF('p', 'mm', 'a4');
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  let yPosition = 30;

  // Helper function to add text with word wrapping
  function addText(text: string, fontSize: number = 10, isBold: boolean = false) {
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }
    
    const lines = doc.splitTextToSize(text, pageWidth - 2 * margin);
    doc.text(lines, margin, yPosition);
    yPosition += lines.length * (fontSize * 0.4) + 5;
    
    // Check if we need a new page
    if (yPosition > 280) {
      doc.addPage();
      yPosition = 30;
    }
  }

  // Title
  addText(`VISA REQUIREMENTS CHECKLIST`, 16, true);
  addText(`${requirements.country.toUpperCase()} - ${requirements.visaType.toUpperCase()}`, 14, true);
  yPosition += 10;

  // General Information
  addText('GENERAL INFORMATION', 14, true);
  addText(`Processing Time: ${requirements.generalInfo.processingTime}`);
  addText(`Validity: ${requirements.generalInfo.validity}`);
  addText(`Fees: ${requirements.generalInfo.fees}`);
  yPosition += 10;

  // Important Notes
  if (requirements.importantNotes?.length > 0) {
    addText('IMPORTANT NOTES', 14, true);
    requirements.importantNotes.forEach((note, index) => {
      addText(`${index + 1}. ${note}`);
    });
    yPosition += 10;
  }

  // Requirements by Category
  const categories = ['document', 'financial', 'personal', 'travel', 'health'];
  categories.forEach(category => {
    const categoryReqs = requirements.requirements.filter(req => req.category === category);
    if (categoryReqs.length > 0) {
      addText(`${category.toUpperCase()} REQUIREMENTS`, 14, true);
      categoryReqs.forEach((req, index) => {
        const status = req.required ? '□ REQUIRED' : '□ OPTIONAL';
        addText(`${status}: ${req.title}`, 10, true);
        addText(`${req.description}`);
        if (req.specificNotes?.length) {
          req.specificNotes.forEach(note => {
            addText(`• ${note}`, 9);
          });
        }
        yPosition += 5;
      });
      yPosition += 5;
    }
  });

  // Footer
  yPosition = 280;
  doc.setFontSize(8);
  doc.text('Generated by VisaValidator - All rights reserved', margin, yPosition);
  doc.text(`Checklist generated on ${new Date().toLocaleDateString()}`, margin, yPosition + 10);

  return Buffer.from(doc.output('arraybuffer'));
}